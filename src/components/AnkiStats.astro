---
interface AnkiResponse {
  today: number;
  error?: boolean;
  message?: string;
}

// Fetch Anki stats
let ankiData: AnkiResponse = { today: 0, error: true, message: 'Loading...' };

try {
  // In development, use relative URL; in production, use full URL
  const apiUrl = import.meta.env.PROD 
    ? `${import.meta.env.SITE || ''}/api/anki`
    : '/api/anki';
    
  const response = await fetch(apiUrl);
  
  if (response.ok) {
    ankiData = await response.json();
  }
} catch (error) {
  console.error('Failed to fetch Anki stats:', error);
  ankiData = { 
    today: 0, 
    error: true, 
    message: 'Failed to connect'
  };
}

const isOffline = ankiData.error;
---

<section class="anki-stats bg-gray-800 rounded-lg p-6 border border-gray-700" aria-label="Anki Statistics">
  <h2 class="text-2xl font-bold mb-4">Anki Reviews</h2>

  {isOffline ? (
    <div class="text-center py-8">
      <div class="text-gray-400 mb-2">
        <svg 
          class="w-12 h-12 mx-auto mb-3 opacity-50" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M18.364 5.636a9 9 0 010 12.728m0 0l-2.829-2.829m2.829 2.829L21 21M15.536 8.464a5 5 0 010 7.072m0 0l-2.829-2.829m-4.243 2.829a4.978 4.978 0 01-1.414-2.83m-1.414 5.658a9 9 0 01-2.167-9.238m7.824 2.167a1 1 0 111.414 1.414m-1.414-1.414L3 3"
          />
        </svg>
        <p class="text-sm">Anki offline</p>
        <p class="text-xs text-gray-500 mt-1">{ankiData.message}</p>
      </div>
    </div>
  ) : (
    <div class="text-center py-8">
      <div class="text-6xl font-bold text-emerald-400 mb-2">
        {ankiData.today}
      </div>
      <div class="text-gray-400 text-sm">
        cards reviewed today
      </div>
    </div>
  )}
</section>

<style>
  .anki-stats:hover {
    border-color: rgb(75, 85, 99);
  }
</style>

